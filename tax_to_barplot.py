#!/usr/bin/python3
# -*- coding: utf-8 -*-
###############################>GENERAL-INFORMATIONS<###############################
"""
Build in Python 3.6.5+

Author:
Filipe Dezordi
zimmer.filipe@gmail.com
https://dezordi.github.io/

Script repository:
https://github.com/dezordi/PEVEI
"""
###############################>LIBRARIES<###############################
import pandas as pd
import argparse, re
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.style as style
###############################>ARGUMENTS<###############################
parser = argparse.ArgumentParser(description = 'Create stacked barplot file for each assembly present in a concatenated taxonomy file')
parser.add_argument("-in", "--input", help="Concatenated file from more than 1 .tax file generated by PEVEI.py", required=True)
parser.add_argument("-md","--mode",help="Create plots with family or order taxonomy? default=Family",default='Family', choices=['Family','Order'])
parser.add_argument("-st","--specifictax",help="Pass specific taxon to generate plots, e.g. Rhabdoviridae Flaviviridae",nargs='+')
parser.add_argument("-gt","--groupbytax",help="Pass treshold number do group taxons, default = 5", default=5,type=int)
args = parser.parse_args()
input_file = args.input
plot_mode = args.mode
specific_tax = args.specifictax
group_value = args.groupbytax
###############################>SNS-STYLE<###############################
sns.set()
style.use('seaborn-ticks')
###############################>REGEX-FUNC<##############################
def get_prefix(name):
    return re.sub(r'\/.*','',name)
###############################>DATAFRAME<###############################
df = pd.read_csv(input_file, sep='\t',header = 0)
if specific_tax != None:
    df = df.loc[df['Family'].isin(specific_tax)]
#grouping families with less than 5 elements to 'Others'
family_count = df['Family'].value_counts()
family_low = family_count[family_count <= group_value]
family_low_list = family_low.index
for i in family_low_list:
    df['Family'] = df['Family'].replace({i:'Others'})
df.insert(0,'Genome',df['Element-ID'])
df['Genome'] = df['Genome'].apply(get_prefix)
df2 = df.groupby(["Genome", plot_mode]).size().reset_index(name="Count")
df3 = df2.pivot_table('Count', ['Genome'], 'Family').fillna(0)
try:
    df3.drop(['Element-ID'], inplace=True)
    df3.drop([plot_mode], axis=1,inplace=True)
except:
    pass
labels = []
columns = [df3.columns.values.tolist()]
for list_ in columns:
    for i in list_:
        labels.append(i)
barplot = df3.plot(kind="bar", stacked=True)
sns.despine(fig=None, top=True, right=True, left=False, bottom=False, offset=None, trim=False)
barplot.legend(loc='upper right', ncol=4, fancybox=True, prop={'size': 6},title=plot_mode, labels=labels, title_fontsize=10)
plt.xlabel('Genomes', fontsize=10)
plt.ylabel('Number of Elements', fontsize=10)
plt.xticks(fontsize=6)
plt.yticks(fontsize=8)
plt.savefig(input_file+'.bar_plot.pdf',dpi=300, bbox_inches='tight')
plt.clf()


