#!/usr/bin/python3
# -*- coding: utf-8 -*-
###############################>GENERAL-INFORMATIONS<###############################
"""
Build in Python 3.6.5+

Author:
Filipe Dezordi
zimmer.filipe@gmail.com
https://dezordi.github.io/

Script repository:
https://github.com/dezordi/PEVEI

"""
###############################>LIBRARIES<###############################
import pandas as pd
import argparse, csv
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.style as style

###############################>ARGUMENTS<###############################
parser = argparse.ArgumentParser(
    description="Create stacked barplots from flaking regions blast results"
)
parser.add_argument(
    "-in", "--input", help=".Tax file generated by PEVEI.py", required=True
)
parser.add_argument(
    "-bf",
    "--blastfiltred",
    help=".noTEs.fl.left.fasta.rn.blast.filtred file generated by PEVEI.py",
    required=True,
)
parser.add_argument(
    "-md",
    "--mode",
    help="Create plots with family or order taxonomy? default=Family",
    default="Family",
    choices=["Family", "Order"],
)
parser.add_argument(
    "-st",
    "--specifictax",
    help="Pass specific taxon to generate plots, e.g. Rhabdoviridae Flaviviridae",
    nargs="+",
)
parser.add_argument(
    "-ste",
    "--specifictes",
    help="Pass specific TEs families to generate plots, e.g. Gypsy, Bel-Pao",
    nargs="+",
)
parser.add_argument(
    "-gt",
    "--groupbytax",
    help="Group families in others category by specific treshold of element numbers, default = 5",
    default=5,
    type=int,
)


args = parser.parse_args()
tax_file = args.input
blast_file = args.blastfiltred
plot_mode = args.mode
specific_tax = args.specifictax
specific_tes = args.specifictes
group_by = args.groupbytax

###############################>SNS-STYLE<###############################
style.use("seaborn-poster")
sns.color_palette("pastel")
###############################>DATAFRAME<###############################
tsv_merged = open(blast_file + ".info", "w")
tsv_merged_writer = csv.writer(tsv_merged, delimiter="\t")
tsv_merged_writer.writerow(
    [
        "Element-ID",
        "Length",
        "ProteinProducts",
        "Super-Kingdom",
        "Order",
        "Family",
        "Genus",
        "Species",
        "Sense",
        "TE-blast",
        "Pident",
        "Length",
        "Evalue",
        "Bitscore",
    ]
)
info_list = []
with open(tax_file, "r") as tax_file_tsv:
    tax_file_tsv_reader = csv.reader(tax_file_tsv, delimiter="\t")
    for line_tax in tax_file_tsv_reader:
        with open(blast_file, "r") as blast_file_tsv:
            blast_file_tsv_reader = csv.reader(blast_file_tsv, delimiter="\t")
            for line_blast in blast_file_tsv_reader:
                if line_tax[0] in line_blast[0]:
                    info_list.append(
                        [
                            line_tax[0],
                            line_tax[1],
                            line_tax[3],
                            line_tax[4],
                            line_tax[5],
                            line_tax[6],
                            line_tax[7],
                            line_tax[8],
                            line_tax[9],
                            line_blast[1],
                            float(line_blast[2]),
                            float(line_blast[3]),
                            float(line_blast[10]),
                            float(line_blast[11]),
                        ]
                    )
    tsv_merged_writer.writerows(info_list)
tsv_merged.close()

with open(blast_file + ".info", "r") as info_tsv_file:
    df = pd.read_csv(info_tsv_file, sep="\t", header=0)
    if specific_tax != None:
        df = df.loc[df["Family"].isin(specific_tax)]
    df = df.replace({"TE-blast": ".*\*\*\*"}, {"TE-blast": ""}, regex=True)
    df = df.replace({"TE-blast": "_.*"}, {"TE-blast": ""}, regex=True)
    if specific_tes != None:
        df = df.loc[df["TE-blast"].isin(specific_tes)]
    df = df.sort_values(by=["Element-ID", "Bitscore"], ascending=False)
    df = df.drop_duplicates(subset=["Element-ID"]).sort_values(
        by=["TE-blast", "Bitscore"], ascending=False
    )
    family_count = df["Family"].value_counts()
    family_low = family_count[family_count <= group_by]
    family_low_list = family_low.index
    for i in family_low_list:
        df["Family"] = df["Family"].replace({i: "Others"})
    if specific_tax == None:
        df2 = df.groupby(["Super-Kingdom", "TE-blast"]).size().reset_index(name="Count")
        df3 = df2.pivot_table("Count", ["Super-Kingdom"], "TE-blast").fillna(0)
        labels = []
        columns = [df3.columns.values.tolist()]
        for list_ in columns:
            for i in list_:
                labels.append(i)
        barplot = df3.plot(kind="barh", stacked=True, width=0.05)
        sns.despine(
            fig=None,
            top=True,
            right=True,
            left=True,
            bottom=False,
            offset=None,
            trim=False,
        )
        barplot.legend(
            loc="upper center",
            ncol=6,
            fancybox=True,
            prop={"size": 12},
            title="TEs",
            labels=labels,
            title_fontsize=10,
        )
        plt.xlabel("Count", fontsize=10)
        plt.ylabel("")
        plt.xticks(fontsize=10)
        plt.yticks(fontsize=8)
        plt.savefig(blast_file + ".all_TEs.pdf", dpi=300, bbox_inches="tight")

    if specific_tax != None:
        df2 = df.groupby(["Family", "TE-blast"]).size().reset_index(name="Count")
        df3 = df2.pivot_table("Count", ["Family"], "TE-blast").fillna(0)
        labels = []
        columns = [df3.columns.values.tolist()]
        for list_ in columns:
            for i in list_:
                labels.append(i)
        barplot = df3.plot(kind="barh", stacked=True, width=0.2)
        sns.despine(
            fig=None,
            top=True,
            right=True,
            left=True,
            bottom=False,
            offset=None,
            trim=False,
        )
        barplot.legend(
            loc="upper center",
            ncol=6,
            fancybox=True,
            bbox_to_anchor=(0.45, 1.20),
            prop={"size": 12},
            title="TEs",
            labels=labels,
            title_fontsize=10,
        )
        plt.xlabel("Count", fontsize=10)
        plt.ylabel("")
        plt.xticks(fontsize=10)
        plt.yticks(fontsize=8)
        plt.savefig(blast_file + ".specific_TEs.pdf", dpi=300, bbox_inches="tight")
